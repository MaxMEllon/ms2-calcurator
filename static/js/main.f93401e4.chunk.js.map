{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["rateMap","+10","+11","+12","+13","+14","App","_useState","useState","_useState2","Object","slicedToArray","result","setResult","onClick","useCallback","e","$","document","querySelector","value","keys","includes","rate","concat","success","Math","random","last","length","react_default","a","createElement","className","style","paddingBottom","disabled","type","map","r","idx","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mJAUMA,EAAU,CACdC,MAAO,GACPC,MAAO,GACPC,MAAO,GACPC,MAAO,GACPC,MAAO,KAmEMC,EAhEO,WAAM,IAAAC,EACEC,mBAAmB,IADrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBK,EADmBH,EAAA,GACXI,EADWJ,EAAA,GAEpBK,EAAUC,sBAAY,SAACC,GAE3B,IAAMC,EAAIC,SAASC,cAAc,eAAeC,MAChD,GAAKV,OAAOW,KAAKrB,GAASsB,SAASL,GAAnC,CACA,IAAMM,EAAOvB,EAAQiB,GACrBJ,EAAUD,EAAOY,OAAO,CAAC,CAAEC,QAASC,KAAKC,SAAWJ,QACnD,CAACX,IACEgB,EAAyB,IAAlBhB,EAAOiB,QAAejB,EAAOA,EAAOiB,OAAS,GAAGJ,QAC7D,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,WAASC,UAAU,gBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,mFAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,wBAMNH,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAAEC,cAAe,SAC1BL,EAAAC,EAAAC,cAAA,oEACAF,EAAAC,EAAAC,cAAA,0EACAF,EAAAC,EAAAC,cAAA,8LAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,oDACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,QAChBH,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,wBAINF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQI,SAAUR,EAAMd,QAASA,EAASuB,KAAK,SAASJ,UAAU,qBAAlE,aAGFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQlB,QAASA,EAASuB,KAAK,SAASJ,UAAU,kBAAlD,qEAGe,IAAlBrB,EAAOiB,QAAgBjB,EAAO0B,IAAI,SAACC,EAAGC,GAAJ,OACjCV,EAAAC,EAAAC,cAAA,QAAMS,IAAKD,EAAKP,UAAS,OAAAT,OAASe,EAAEd,QAAU,YAAc,eAAiBc,EAAEd,QAAU,eAAO,sBC9DxFiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAAS/B,SAASgC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f93401e4.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\n\ntype Result = {\n  success: boolean\n  // weapon: number,\n  // onyx: number,\n  // kaonyx: number,\n  // crystal: number,\n}\n\nconst rateMap = {\n  '+10': 0.4,\n  '+11': 0.3,\n  '+12': 0.2,\n  '+13': 0.1,\n  '+14': 0.05,\n}\n\nconst App: React.FC = () => {\n  const [result, setResult] = useState<Result[]>([])\n  const onClick = useCallback((e) => {\n    // @ts-ignore\n    const $ = document.querySelector(\"select.plus\").value\n    if (!Object.keys(rateMap).includes($)) return\n    const rate = rateMap[$ as keyof typeof rateMap]\n    setResult(result.concat([{ success: Math.random() < rate }]))\n  }, [result])\n  const last = result.length !== 0 ? result[result.length - 1].success : false\n  return (\n    <div className=\"container\">\n      <section className=\"hero is-info\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">\n              エンチャント シミュレーター\n            </h1>\n            <h2 className=\"subtitle\">\n              Enchant Simulator\n            </h2>\n          </div>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container\">\n          <dl style={{ paddingBottom: \"10px\"}}>\n            <dd>TODO: 必要素材数の算出</dd>\n            <dd>TODO: 異なる武器種の対応</dd>\n            <dd>TODO: エンチャ時に武器を過剰に与えるかどうかを選択できるように</dd>\n          </dl>\n        </div>\n        <div className=\"container\">\n          <h1 className=\"title\">エンチャント対象</h1>\n          <div className=\"field has-addons\">\n            <div className=\"control\">\n              <div className=\"select is-fullwidth\">\n                <select className=\"plus\">\n                  <option>選択してね</option>\n                  <option>+10</option>\n                  <option>+11</option>\n                  <option>+12</option>\n                  <option>+13</option>\n                  <option>+14</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"control\">\n              <button disabled={last} onClick={onClick} type=\"submit\" className=\"button is-primary\">Enchant!</button>\n            </div>\n\n            <div className=\"control\">\n              <button onClick={onClick} type=\"submit\" className=\"button is-info\">使った素材集計 (準備中)</button>\n            </div>\n          </div>\n          {result.length !== 0 && result.map((r, idx) => (\n            <span key={idx} className={`tag ${r.success ? 'is-danger' : 'is-success'}`}>{r.success ? \"成功\" : \"失敗\"}</span>\n          ))}\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bulma/css/bulma.min.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}